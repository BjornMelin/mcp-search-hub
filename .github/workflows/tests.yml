name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        uv pip install -r requirements.txt
        uv pip install pytest pytest-asyncio pytest-cov
    
    - name: Install Provider Dependencies
      run: |
        npm install -g firecrawl-mcp-server@latest
        npm install -g @modelcontextprotocol/server-exa@latest
        npm install -g @ppl-ai/perplexity-mcp@latest
        npm install -g tavily-mcp@0.2.0
        pip install mcp-search-linkup
    
    - name: Run tests
      env:
        # Mock API keys for testing
        LINKUP_API_KEY: test_linkup_api_key
        EXA_API_KEY: test_exa_api_key
        PERPLEXITY_API_KEY: test_perplexity_api_key
        TAVILY_API_KEY: test_tavily_api_key
        FIRECRAWL_API_KEY: test_firecrawl_api_key
      run: |
        uv run pytest --cov=mcp_search_hub --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install ruff
    
    - name: Run ruff
      run: |
        ruff check .
    
    - name: Run ruff format check
      run: |
        ruff format --check .

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        uv pip install -r requirements.txt
        uv pip install pytest pytest-asyncio pytest-cov
    
    - name: Install Provider Dependencies
      run: |
        npm install -g firecrawl-mcp-server@latest
        npm install -g @modelcontextprotocol/server-exa@latest
        npm install -g @ppl-ai/perplexity-mcp@latest
        npm install -g tavily-mcp@0.2.0
        pip install mcp-search-linkup
    
    - name: Setup Redis for cache tests
      uses: supercharge/redis-github-action@1.5.0
      with:
        redis-version: 7
    
    - name: Run integration tests
      env:
        # Mock API keys for testing
        LINKUP_API_KEY: test_linkup_api_key
        EXA_API_KEY: test_exa_api_key
        PERPLEXITY_API_KEY: test_perplexity_api_key
        TAVILY_API_KEY: test_tavily_api_key
        FIRECRAWL_API_KEY: test_firecrawl_api_key
        # Redis config for tiered cache tests
        CACHE_REDIS_ENABLED: true
        CACHE_REDIS_URL: redis://localhost:6379
        # Middleware config
        MIDDLEWARE_AUTH_ENABLED: true
        MIDDLEWARE_RATE_LIMIT_ENABLED: true
        MIDDLEWARE_RETRY_ENABLED: true
      run: |
        uv run pytest tests/test_end_to_end.py
    
    - name: Run server startup test
      env:
        # Mock API keys for testing
        LINKUP_API_KEY: test_linkup_api_key
        EXA_API_KEY: test_exa_api_key
        PERPLEXITY_API_KEY: test_perplexity_api_key
        TAVILY_API_KEY: test_tavily_api_key
        FIRECRAWL_API_KEY: test_firecrawl_api_key
      run: |
        # Start server in background with very short timeout
        timeout 30s python -m mcp_search_hub.main --timeout 15 || code=$?
        if [ $code -eq 124 ]; then
          echo "Server started successfully and exited due to timeout"
          exit 0
        else
          echo "Server failed to start properly"
          exit 1
        fi