version: "3.8"

services:
  mcp-search-hub:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime  # Use the runtime stage for production
    ports:
      - "8000:8000"
    env_file: 
      - .env.prod  # Use production environment file
    environment:
      - TRANSPORT=${TRANSPORT:-streamable-http}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - CACHE_REDIS_TTL=${CACHE_REDIS_TTL:-86400}  # 24 hours TTL for production
      - CACHE_MEMORY_TTL=${CACHE_MEMORY_TTL:-3600}  # 1 hour memory cache
      - REDIS_CACHE_ENABLED=${REDIS_CACHE_ENABLED:-true}
      - CACHE_FINGERPRINT_ENABLED=${CACHE_FINGERPRINT_ENABLED:-true}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "500mb", "--maxmemory-policy", "allkeys-lru"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 600M
        reservations:
          cpus: '0.2'
          memory: 300M
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  redis-data: